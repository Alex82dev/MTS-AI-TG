import argparse
import random
from configparser import ConfigParser
from pprint import pprint
from typing import Mapping

import grpc
from google.protobuf.json_format import MessageToDict
from keycloak import KeycloakOpenID
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

import tts_pb2
import tts_pb2_grpc


def read_api_config(file_name: str = "config.ini") -> ConfigParser:
    config = ConfigParser()
    config.read(file_name)

    return config


def get_request_metadata(auth_config: Mapping[str, str]) -> list[tuple[str, str]]:
   
    sso_connection = KeycloakOpenID(
        auth_config["sso_server_url"],
        auth_config["realm_name"],
        auth_config["client_id"],
        auth_config["client_secret"],
        verify=True,
    )
    token_info = sso_connection.token(grant_type="client_credentials")
    access_token = token_info["access_token"]

    # Генерируем уникальный идентификатор трассировки
    trace_id = str(random.randint(1000, 9999))
    print(f"Trace id: {trace_id}")

    
    metadata = [
        ("authorization", f"Bearer {access_token}"),
        ("external_trace_id", trace_id),
    ]

    return metadata


def save_audio_file(response: tts_pb2.SynthesizeSpeechResponse, file_path: str):
   
    with open(file_path, "wb") as f:
        f.write(response.audio_content)
    print(f"Аудиофайл сохранен: {file_path}")


def send_audio_file_to_telegram(file_path: str, chat_id: int, bot_token: str):
     
    updater = Updater(token=bot_token)
    updater.bot.send_audio(chat_id=chat_id, audio=open(file_path, "rb"))
    print("Аудиофайл отправлен в Telegram")


def synthesize_file(text: str, api_address: str, auth_config: Mapping[str, str]) -> str:
     
    request = tts_pb2.SynthesizeSpeechRequest(
        text=text,
        encoding=tts_pb2.AudioEncoding.LINEAR_PCM,
        sample_rate_hertz=22050,
        voice_name="gandzhaev",
        synthesize_options=tts_pb2.SynthesizeOptions(
            postprocessing_mode=tts_pb2.SynthesizeOptions.PostprocessingMode.POST_PROCESSING_DISABLE,
            model_type="default",
            voice_style=tts_pb2.VoiceStyle.VOICE_STYLE_NEUTRAL,
        ),
    )
    print("Prepared request:")
    pprint(MessageToDict(request))

    options = [
        ("grpc.min_reconnect_backoff_ms", 1000),
        ("grpc.max_reconnect_backoff_ms", 1000),
        ("grpc.max_send_message_length", -1),
        ("grpc.max_receive_message_length", -1),
    ]

    credentials = grpc.ssl_channel_credentials()

    print(f"\nSending request to gRPC server {api_address}")

    # Получаем путь для сохранения аудиофайла
    file_path = f"audio_{random.randint(1000, 9999)}.wav"

    with grpc.secure_channel(
        api_address, credentials=credentials, options=options
    ) as channel:
        stub = tts_pb2_grpc.TTSStub(channel)

        request_metadata = get_request_metadata(auth_config)

        response, call = stub.Synthesize.with_call(
            request,
            metadata=request_metadata,
            wait_for_ready=True,
        )

         
        save_audio_file(response, file_path)

         
        send_audio_file_to_telegram(file_path, chat_id=123456789, bot_token="YOUR_BOT_TOKEN")


def start_handler(update: Update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text="Привет! Отправьте мне текст, и я синтезирую его в речь.")


def text_handler(update: Update, context):
    text = update.message.text
   api_address = config["API"]["server_address"]
    auth_config = config["Auth"]

    synthesize_file(text, api_address, auth_config)

     
    audio_file_path = "path/to/audio/file.wav"
    context.bot.send_audio(chat_id=update.effective_chat.id, audio=open(audio_file_path, "rb"))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("text", type=str, nargs="?", help="текст для синтеза речи")
    args = parser.parse_args()

    config = read_api_config()

     
    updater = Updater(token=config["Telegram"]["bot_token"], use_context=True)

     
    dispatcher = updater.dispatcher

    
    start_handler = CommandHandler("start", start_handler)
    text_handler = MessageHandler(Filters.text, text_handler)

   
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(text_handler)

     
    updater.start_polling()



#  https://t.me/EXPRTI
